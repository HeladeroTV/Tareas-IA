# Sistema Experto para Diagn√≥stico de Problemas en Computadoras
# Autor: Asistente IA
# Descripci√≥n: Sistema b√°sico que diagnostica problemas comunes en computadoras

class SistemaExpertoComputadoras:
    def __init__(self):
        self.sintomas = {}
        self.diagnostico = ""
        self.confianza = 0
        
    def inicializar_base_conocimiento(self):
        """Define las reglas del sistema experto"""
        self.reglas = [
            {
                'condiciones': ['no_enciende', 'luces_apagadas'],
                'diagnostico': 'Problema de alimentaci√≥n el√©ctrica',
                'solucion': 'Verificar cable de corriente y fuente de poder',
                'confianza': 90
            },
            {
                'condiciones': ['enciende', 'no_imagen', 'ventiladores_funcionan'],
                'diagnostico': 'Problema con la tarjeta gr√°fica o monitor',
                'solucion': 'Revisar conexiones del monitor y tarjeta de video',
                'confianza': 85
            },
            {
                'condiciones': ['enciende', 'pitidos_continuos'],
                'diagnostico': 'Error en memoria RAM',
                'solucion': 'Revisar y recolocar m√≥dulos de memoria',
                'confianza': 88
            },
            {
                'condiciones': ['muy_lento', 'mucho_ruido_ventilador'],
                'diagnostico': 'Sobrecalentamiento del procesador',
                'solucion': 'Limpiar ventiladores y aplicar pasta t√©rmica',
                'confianza': 75
            },
            {
                'condiciones': ['pantalla_azul', 'reinicios_aleatorios'],
                'diagnostico': 'Problema de software o drivers',
                'solucion': 'Actualizar drivers y escanear en modo seguro',
                'confianza': 70
            },
            {
                'condiciones': ['no_internet', 'otros_dispositivos_funcionan'],
                'diagnostico': 'Problema de configuraci√≥n de red',
                'solucion': 'Reiniciar adaptador de red y verificar configuraci√≥n',
                'confianza': 80
            }
        ]
    
    def hacer_preguntas(self):
        """Recopila informaci√≥n del usuario"""
        print("=== SISTEMA EXPERTO - DIAGN√ìSTICO DE COMPUTADORAS ===")
        print("Responda con 'si' o 'no' a las siguientes preguntas:\n")
        
        preguntas = {
            'no_enciende': '¬øLa computadora no enciende para nada?',
            'luces_apagadas': '¬øNo se ven luces encendidas en la computadora?',
            'enciende': '¬øLa computadora enciende pero tiene problemas?',
            'no_imagen': '¬øNo aparece imagen en el monitor?',
            'ventiladores_funcionan': '¬øEscucha que los ventiladores funcionan?',
            'pitidos_continuos': '¬øEscucha pitidos continuos al encender?',
            'muy_lento': '¬øLa computadora funciona muy lenta?',
            'mucho_ruido_ventilador': '¬øLos ventiladores hacen mucho ruido?',
            'pantalla_azul': '¬øAparece pantalla azul de error?',
            'reinicios_aleatorios': '¬øSe reinicia sola la computadora?',
            'no_internet': '¬øNo tiene conexi√≥n a internet?',
            'otros_dispositivos_funcionan': '¬øOtros dispositivos s√≠ tienen internet?'
        }
        
        for clave, pregunta in preguntas.items():
            while True:
                respuesta = input(f"{pregunta} ").lower().strip()
                if respuesta in ['si', 's√≠', 's', 'yes', 'y']:
                    self.sintomas[clave] = True
                    break
                elif respuesta in ['no', 'n']:
                    self.sintomas[clave] = False
                    break
                else:
                    print("Por favor responda 'si' o 'no'")
    
    def evaluar_reglas(self):
        """Eval√∫a las reglas contra los s√≠ntomas recopilados"""
        mejor_diagnostico = None
        mejor_confianza = 0
        
        for regla in self.reglas:
            coincidencias = 0
            total_condiciones = len(regla['condiciones'])
            
            # Verificar cu√°ntas condiciones se cumplen
            for condicion in regla['condiciones']:
                if self.sintomas.get(condicion, False):
                    coincidencias += 1
            
            # Calcular porcentaje de coincidencia
            porcentaje_coincidencia = (coincidencias / total_condiciones) * 100
            
            # Si todas las condiciones se cumplen, es un diagn√≥stico v√°lido
            if coincidencias == total_condiciones:
                confianza_ajustada = regla['confianza']
                if confianza_ajustada > mejor_confianza:
                    mejor_confianza = confianza_ajustada
                    mejor_diagnostico = regla
        
        return mejor_diagnostico, mejor_confianza
    
    def mostrar_diagnostico(self, diagnostico, confianza):
        """Muestra el resultado del diagn√≥stico"""
        print("\n" + "="*50)
        print("RESULTADO DEL DIAGN√ìSTICO")
        print("="*50)
        
        if diagnostico:
            print(f"Diagn√≥stico: {diagnostico['diagnostico']}")
            print(f"Confianza: {confianza}%")
            print(f"Soluci√≥n recomendada: {diagnostico['solucion']}")
            
            if confianza >= 80:
                print("üü¢ Diagn√≥stico con alta confianza")
            elif confianza >= 60:
                print("üü° Diagn√≥stico con confianza media")
            else:
                print("üî¥ Diagn√≥stico con baja confianza")
        else:
            print("‚ùå No se pudo determinar el problema con los s√≠ntomas proporcionados.")
            print("Recomendaci√≥n: Consulte con un t√©cnico especializado.")
    
    def ejecutar(self):
        """M√©todo principal que ejecuta el sistema experto"""
        self.inicializar_base_conocimiento()
        self.hacer_preguntas()
        diagnostico, confianza = self.evaluar_reglas()
        self.mostrar_diagnostico(diagnostico, confianza)
        
        print("\n¬øDesea realizar otro diagn√≥stico? (si/no)")
        if input().lower() in ['si', 's√≠', 's', 'yes', 'y']:
            self.sintomas = {}  # Limpiar s√≠ntomas
            self.ejecutar()

# Funci√≥n principal
def main():
    print("Iniciando Sistema Experto...")
    sistema = SistemaExpertoComputadoras()
    sistema.ejecutar()
    print("\n¬°Gracias por usar el Sistema Experto!")

# Ejecutar el programa
if __name__ == "__main__":
    main()